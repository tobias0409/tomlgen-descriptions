set = "RV64Zfh"
width = 32

[formats]
names = [
    "format-1-7",
    "format-2-1",
    "format-2-2",
    "format-3-1",
    "format-3-2",
    "format-3-3",
    "format-4-3",
    "format-4-7",
    "format-5-0",
    "format-6-15",
    "format-7-0",
]
parts = [
    [
        "rd_Register_int",
        5,
        "Register_int",
    ],
    [
        "rd_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs1_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs1_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs2_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs2_Register_float",
        5,
        "Register_float",
    ],
    [
        "rm",
        3,
        "Mapping_round",
    ],
    [
        "rs3_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs3_Register_float",
        5,
        "Register_float",
    ],
    [
        "none",
        32,
        "u32",
    ],
    [
        "imm",
        32,
        "VInt",
    ],
    [
        "himm",
        32,
        "VInt",
        "hex",
    ],
]

[types]
names = [
    "type-1-7",
    "type-2-1",
    "type-2-2",
    "type-3-1",
    "type-3-2",
    "type-3-3",
    "type-4-3",
    "type-4-7",
    "type-5-0",
    "type-6-15",
    "type-7-0",
]
type-1-7 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-2-1 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-2-2 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-3-1 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-3-2 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-3-3 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-4-3 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-4-7 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-5-0 = [
    { name = "himm", top = 11, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-6-15 = [
    { name = "rs3_Register_float", top = 4, bot = 0 },
    { name = "none", top = 26, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-7-0 = [
    { name = "himm", top = 11, bot = 5 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "himm", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]

[format-1-7]
type = "type-1-7"

[format-1-7.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rs2_Register_float%, %rm%"

[format-1-7.instructions."fadd.h"]
mask = 4261412991
match = 67108947
description = "No description available.\n"

[format-1-7.instructions."fdiv.h"]
mask = 4261412991
match = 469762131
description = "No description available.\n"

[format-1-7.instructions."fmul.h"]
mask = 4261412991
match = 335544403
description = "No description available.\n"

[format-1-7.instructions."fsub.h"]
mask = 4261412991
match = 201326675
description = "No description available.\n"

[format-2-1]
type = "type-2-1"

[format-2-1.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_float%"

[format-2-1.instructions."fclass.h"]
mask = 4293947519
match = 3825209427
description = "No description available.\n"

[format-2-1.instructions."fmv.x.h"]
mask = 4293947519
match = 3825205331
description = "Moves the half-precision value in floating-point register fs1 represented in IEEE 754-2008\nencoding to the lower 16 bits of integer register xd.\n\nThe bits are not modified in the transfer, and in particular, the payloads of non-canonical\nNaNs are preserved.\n\nThe highest XLEN-16 bits of the destination register are filled with copies of the\nfloating-point number's sign bit.\n"

[format-2-2]
type = "type-2-2"

[format-2-2.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_int%"

[format-2-2.instructions."fmv.h.x"]
mask = 4293947519
match = 4093640787
description = "Moves the half-precision value encoded in IEEE 754-2008 standard encoding\nfrom the lower 16 bits of integer register `xs1` to the floating-point\nregister `fd`. The bits are not modified in the transfer, and in particular,\nthe payloads of non-canonical NaNs are preserved.\n"

[format-3-1]
type = "type-3-1"

[format-3-1.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_float%, %rm%"

[format-3-1.instructions."fcvt.l.h"]
mask = 4293918847
match = 3290431571

[[format-3-1.instructions."fcvt.l.h".description]]
id = "inst-fcvt.l.h-behaviour"
normative = false
text = "`fcvt.l.h` converts a half-precision floating-point number to a signed 64-bit integer.\n"

[format-3-1.instructions."fcvt.lu.h"]
mask = 4293918847
match = 3291480147

[[format-3-1.instructions."fcvt.lu.h".description]]
id = "inst-fcvt.lu.h-behaviour"
normative = false
text = "`fcvt.lu.h` converts a half-precision floating-point number to an unsigned 64-bit integer.\n"

[format-3-1.instructions."fcvt.w.h"]
mask = 4293918847
match = 3288334419

[[format-3-1.instructions."fcvt.w.h".description]]
id = "inst-fcvt.w.h-behaviour"
normative = false
text = "`fcvt.w.h` converts a half-precision floating-point number to a signed 32-bit integer.\n"

[format-3-1.instructions."fcvt.wu.h"]
mask = 4293918847
match = 3289382995

[[format-3-1.instructions."fcvt.wu.h".description]]
id = "inst-fcvt.wu.h-behaviour"
normative = false
text = "`fcvt.wu.h` converts a half-precision floating-point number to an unsigned 32-bit integer.\n"

[format-3-2]
type = "type-3-2"

[format-3-2.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_int%, %rm%"

[format-3-2.instructions."fcvt.h.l"]
mask = 4293918847
match = 3558867027

[[format-3-2.instructions."fcvt.h.l".description]]
id = "inst-fcvt.h.l-behaviour"
normative = false
text = "`fcvt.h.l` converts a 64-bit signed integer to a half-precision floating-point number.\n"

[format-3-2.instructions."fcvt.h.lu"]
mask = 4293918847
match = 3559915603

[[format-3-2.instructions."fcvt.h.lu".description]]
id = "inst-fcvt.h.lu-behaviour"
normative = false
text = "`fcvt.h.lu` converts a 64-bit unsigned integer to a half-precision floating-point number.\n"

[format-3-2.instructions."fcvt.h.w"]
mask = 4293918847
match = 3556769875

[[format-3-2.instructions."fcvt.h.w".description]]
id = "inst-fcvt.h.w-behaviour"
normative = false
text = "`fcvt.h.w` converts a 32-bit signed integer to a half-precision floating-point number.\n"

[format-3-2.instructions."fcvt.h.wu"]
mask = 4293918847
match = 3557818451

[[format-3-2.instructions."fcvt.h.wu".description]]
id = "inst-fcvt.h.wu-behaviour"
normative = false
text = "`fcvt.h.wu` converts a 32-bit unsigned integer to a half-precision floating-point number.\n"

[format-3-3]
type = "type-3-3"

[format-3-3.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rm%"

[format-3-3.instructions."fcvt.h.s"]
mask = 4293918847
match = 1140850771
description = "Converts a half-precision number in floating-point register _fs1_ into a single-precision floating-point number in\nfloating-point register _fd_.\n\n`fcvt.h.s` rounds according to the _rm_ field.\n\nAll floating-point conversion instructions set the Inexact exception flag if the rounded\nresult differs from the operand value and the Invalid exception flag is not set.\n"

[format-3-3.instructions."fcvt.s.h"]
mask = 4293918847
match = 1075839059
description = "Converts a single-precision number in floating-point register _fs1_ into a half-precision floating-point number in\nfloating-point register _fd_.\n\n`fcvt.s.h` will never round, and so the 'rm' field is effectively ignored.\n"

[format-3-3.instructions."fsqrt.h"]
mask = 4293918847
match = 1543503955
description = "No description available.\n"

[format-4-3]
type = "type-4-3"

[format-4-3.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_float%, %rs2_Register_float%"

[format-4-3.instructions."feq.h"]
mask = 4261441663
match = 2751471699
description = "No description available.\n"

[format-4-3.instructions."fle.h"]
mask = 4261441663
match = 2751463507
description = "No description available.\n"

[format-4-3.instructions."flt.h"]
mask = 4261441663
match = 2751467603
description = "No description available.\n"

[format-4-7]
type = "type-4-7"

[format-4-7.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rs2_Register_float%"

[format-4-7.instructions."fmax.h"]
mask = 4261441663
match = 738201683
description = "No description available.\n"

[format-4-7.instructions."fmin.h"]
mask = 4261441663
match = 738197587
description = "No description available.\n"

[format-4-7.instructions."fsgnj.h"]
mask = 4261441663
match = 603979859
description = "No description available.\n"

[format-4-7.instructions."fsgnjn.h"]
mask = 4261441663
match = 603983955
description = "No description available.\n"

[format-4-7.instructions."fsgnjx.h"]
mask = 4261441663
match = 603988051
description = "No description available.\n"

[format-5-0]
type = "type-5-0"

[format-5-0.repr]
default = "$name$ %rd_Register_float%, %himm%(%rs1_Register_int%)"

[format-5-0.instructions.flh]
mask = 28799
match = 4103
description = "The `flh` instruction loads a single-precision floating-point value from memory at address _xs1_ + _imm_ into floating-point register _xd_.\n\n`flh` does not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved.\n\n`flh` is only guaranteed to execute atomically if the effective address is naturally aligned.\n"

[format-6-15]
type = "type-6-15"

[format-6-15.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rs2_Register_float%, %rs3_Register_float%, %rm%"

[format-6-15.instructions."fmadd.h"]
mask = 100663423
match = 67108931
description = "No description available.\n"

[format-6-15.instructions."fmsub.h"]
mask = 100663423
match = 67108935
description = "No description available.\n"

[format-6-15.instructions."fnmadd.h"]
mask = 100663423
match = 67108943
description = "No description available.\n"

[format-6-15.instructions."fnmsub.h"]
mask = 100663423
match = 67108939
description = "No description available.\n"

[format-7-0]
type = "type-7-0"

[format-7-0.repr]
default = "$name$ %rs2_Register_float%, %himm%(%rs1_Register_int%)"

[format-7-0.instructions.fsh]
mask = 28799
match = 4135
description = "The `fsh` instruction stores a half-precision floating-point value\nfrom register _xd_ to memory at address _xs1_ + _imm_.\n\n`fsh` does not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved.\n\n`fsh` ignores all but the lower 16 bits in _fs2_.\n\n`fsh` is only guaranteed to execute atomically if the effective address is naturally aligned.\n"

[mappings]
names = [
    "Register_int",
    "Register_float",
    "Mapping_round",
]
number = 32
Register_int = [
    "zero",
    "ra",
    "sp",
    "gp",
    "tp",
    "t0",
    "t1",
    "t2",
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "s2",
    "s3",
    "s4",
    "s5",
    "s6",
    "s7",
    "s8",
    "s9",
    "s10",
    "s11",
    "t3",
    "t4",
    "t5",
    "t6",
]
Register_float = [
    "ft0",
    "ft1",
    "ft2",
    "ft3",
    "ft4",
    "ft5",
    "ft6",
    "ft7",
    "fs0",
    "fs1",
    "fa0",
    "fa1",
    "fa2",
    "fa3",
    "fa4",
    "fa5",
    "fa6",
    "fa7",
    "fs2",
    "fs3",
    "fs4",
    "fs5",
    "fs6",
    "fs7",
    "fs8",
    "fs9",
    "fs10",
    "fs11",
    "ft8",
    "ft9",
    "ft10",
    "ft11",
]
Mapping_round = [
    "rne",
    "rtz",
    "rdn",
    "rup",
    "rmm",
    "unknown",
    "unknown",
    "dyn",
]
