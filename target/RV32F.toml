set = "RV32F"
width = 32

[formats]
names = [
    "format_1-7",
    "format_2-1",
    "format_2-2",
    "format_3-1",
    "format_3-2",
    "format_3-3",
    "format_4-3",
    "format_4-7",
    "format_5-2",
    "format_6-15",
    "format_7-1",
]
parts = [
    [
        "rd_Register_int",
        5,
        "Register_int",
    ],
    [
        "rd_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs1_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs1_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs2_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs2_Register_float",
        5,
        "Register_float",
    ],
    [
        "rm",
        3,
        "Mapping_round",
    ],
    [
        "rs3_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs3_Register_float",
        5,
        "Register_float",
    ],
    [
        "none",
        32,
        "u32",
    ],
    [
        "imm",
        32,
        "VInt",
    ],
    [
        "himm",
        32,
        "VInt",
        "hex",
    ],
]

[types]
names = [
    "type_1-7",
    "type_2-1",
    "type_2-2",
    "type_3-1",
    "type_3-2",
    "type_3-3",
    "type_4-3",
    "type_4-7",
    "type_5-2",
    "type_6-15",
    "type_7-1",
]
type_1-7 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_2-1 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_2-2 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_3-1 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_3-2 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_3-3 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_4-3 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_4-7 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_5-2 = [
    { name = "imm", top = 11, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_6-15 = [
    { name = "rs3_Register_float", top = 4, bot = 0 },
    { name = "none", top = 26, bot = 25 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_float", top = 4, bot = 0 },
    { name = "rm", top = 2, bot = 0 },
    { name = "rd_Register_float", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type_7-1 = [
    { name = "imm", top = 11, bot = 5 },
    { name = "rs2_Register_float", top = 4, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "imm", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]

[format_1-7]
type = "type_1-7"

[format_1-7.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rs2_Register_float%, %rm%"

[format_1-7.instructions."fadd.s"]
mask = 4261412991
match = 83
description = "Do the single-precision floating-point addition of fs1 and fs2 and store the result in fd.\nrm is the dynamic Rounding Mode.\n"

[format_1-7.instructions."fdiv.s"]
mask = 4261412991
match = 402653267
description = "No description available.\n"

[format_1-7.instructions."fmul.s"]
mask = 4261412991
match = 268435539
description = "No description available.\n"

[format_1-7.instructions."fsub.s"]
mask = 4261412991
match = 134217811
description = "Do the single-precision floating-point subtraction of fs2 from fs1 and store the result in fd.\nrm is the dynamic Rounding Mode.\n"

[format_2-1]
type = "type_2-1"

[format_2-1.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_float%"

[format_2-1.instructions."fclass.s"]
mask = 4293947519
match = 3758100563
description = "The `fclass.s` instruction examines the value in floating-point register\n_fs1_ and writes to integer register _xd_ a 10-bit mask that indicates\nthe class of the floating-point number.\nThe format of the mask is described in the table below.\nThe corresponding bit in _xd_ will be set if the property is true and\nclear otherwise.\nAll other bits in _xd_ are cleared.\nNote that exactly one bit in xd will be set.\n`fclass.s` does not set the floating-point exception flags.\n\n.Format of result of `fclass` instruction.\n[%autowidth,float=\"center\",align=\"center\",cols=\"^,<\",options=\"header\",]\n|===\n|_xd_ bit |Meaning\n|0 |_fs1_ is latexmath:[$-\\infty$].\n|1 |_fs1_ is a negative normal number.\n|2 |_fs1_ is a negative subnormal number.\n|3 |_fs1_ is latexmath:[$-0$].\n|4 |_fs1_ is latexmath:[$+0$].\n|5 |_fs1_ is a positive subnormal number.\n|6 |_fs1_ is a positive normal number.\n|7 |_fs1_ is latexmath:[$+\\infty$].\n|8 |_fs1_ is a signaling NaN.\n|9 |_fs1_ is a quiet NaN.\n|===\n"

[format_2-1.instructions."fmv.x.w"]
mask = 4293947519
match = 3758096467
description = "Moves the single-precision value in floating-point register fs1 represented in IEEE 754-2008\nencoding to the lower 32 bits of integer register xd.\nThe bits are not modified in the transfer, and in particular, the payloads of non-canonical\nNaNs are preserved.\nFor RV64, the higher 32 bits of the destination register are filled with copies of the\nfloating-point number's sign bit.\n"

[format_2-2]
type = "type_2-2"

[format_2-2.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_int%"

[format_2-2.instructions."fmv.w.x"]
mask = 4293947519
match = 4026531923
description = "Moves the single-precision value encoded in IEEE 754-2008 standard encoding\nfrom the lower 32 bits of integer register `xs1` to the floating-point\nregister `fd`. The bits are not modified in the transfer, and in particular,\nthe payloads of non-canonical NaNs are preserved.\n"

[format_3-1]
type = "type_3-1"

[format_3-1.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_float%, %rm%"

[format_3-1.instructions."fcvt.w.s"]
mask = 4293918847
match = 3221225555
description = "Converts a floating-point number in floating-point register _fs1_ to a signed 32-bit integer in\ninteger register _xd_.\n\nFor XLEN &gt;32, `fcvt.w.s` sign-extends the 32-bit result to the destination register width.\n\nIf the rounded result is not representable as a 32-bit signed integer, it is clipped to the\nnearest value and the invalid flag is set.\n\nThe range of valid inputs and behavior for invalid inputs are:\n\n[separator=\"!\"]\n!===\n! ! Value\n\nh! Minimum valid input (after rounding) ! `-2^31`\nh! Maximum valid input (after rounding) ! `2^31 - 1`\nh! Output for out-of-range negative input ! `-2^31`\nh! Output for `-&infin;` ! `-2^31`\nh! Output for out-of-range positive input ! `2^31 - 1`\nh! Output for `+&infin;` for `NaN` ! `2^31 - 1`\n!===\n\nAll floating-point to integer and integer to floating-point conversion instructions round\naccording to the _rm_ field.\nA floating-point register can be initialized to floating-point positive zero using\n`fcvt.s.w xd, x0`, which will never set any exception flags.\n\nAll floating-point conversion instructions set the Inexact exception flag if the rounded\nresult differs from the operand value and the Invalid exception flag is not set.\n"

[format_3-1.instructions."fcvt.wu.s"]
mask = 4293918847
match = 3222274131
description = "Converts a floating-point number in floating-point register _fs1_ to an unsigned 32-bit integer in integer register _xd_.\n\nFor XLEN &gt;32, `fcvt.wu.s` sign-extends the 32-bit result to the destination register width.\n\nIf the rounded result is not representable as a 32-bit unsigned integer, it is clipped to the\nnearest value and the invalid flag is set.\n\nThe range of valid inputs and behavior for invalid inputs are:\n\n[separator=\"!\"]\n!===\n! ! Value\n\nh! Minimum valid input (after rounding) ! `0`\nh! Maximum valid input (after rounding) ! `2^32 - 1`\nh! Output for out-of-range negative input ! `0`\nh! Output for `-&infin;` ! `0`\nh! Output for out-of-range positive input ! `2^32 - 1`\nh! Output for `+&infin;` for `NaN` ! `2^32 - 1`\n!===\n\nAll floating-point to integer and integer to floating-point conversion instructions round\naccording to the _rm_ field.\nA floating-point register can be initialized to floating-point positive zero using\n`fcvt.s.w xd, x0`, which will never set any exception flags.\n\nAll floating-point conversion instructions set the Inexact exception flag if the rounded\nresult differs from the operand value and the Invalid exception flag is not set.\n"

[format_3-2]
type = "type_3-2"

[format_3-2.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_int%, %rm%"

[format_3-2.instructions."fcvt.s.w"]
mask = 4293918847
match = 3489661011
description = "Converts a 32-bit signed integer in integer register _xs1_ into a floating-point number in\nfloating-point register _fd_.\n\nAll floating-point to integer and integer to floating-point conversion instructions round\naccording to the _rm_ field.\nA floating-point register can be initialized to floating-point positive zero using\n`fcvt.s.w fd, x0`, which will never set any exception flags.\n\nAll floating-point conversion instructions set the Inexact exception flag if the rounded\nresult differs from the operand value and the Invalid exception flag is not set.\n"

[format_3-2.instructions."fcvt.s.wu"]
mask = 4293918847
match = 3490709587
description = "Converts a 32-bit unsigned integer in integer register _xs1_ into a floating-point number in\nfloating-point register _fd_.\n\nAll floating-point to integer and integer to floating-point conversion instructions round\naccording to the _rm_ field.\nA floating-point register can be initialized to floating-point positive zero using\n`fcvt.s.w rd, x0`, which will never set any exception flags.\n\nAll floating-point conversion instructions set the Inexact exception flag if the rounded\nresult differs from the operand value and the Invalid exception flag is not set.\n"

[format_3-3]
type = "type_3-3"

[format_3-3.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rm%"

[format_3-3.instructions."fsqrt.s"]
mask = 4293918847
match = 1476395091
description = "No description available.\n"

[format_4-3]
type = "type_4-3"

[format_4-3.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_float%, %rs2_Register_float%"

[format_4-3.instructions."feq.s"]
mask = 4261441663
match = 2684362835
description = "Writes 1 to _xd_ if _fs1_ and _fs2_ are equal, and 0 otherwise.\n\nIf either operand is NaN, the result is 0 (not equal). If either operand is a signaling NaN, the invalid flag is set.\n\nPositive zero is considered equal to negative zero.\n"

[format_4-3.instructions."fle.s"]
mask = 4261441663
match = 2684354643
description = "Writes 1 to _xd_ if _fs1_ is less than or equal to _fs2_, and 0 otherwise.\n\nIf either operand is NaN, the result is 0 (not equal).\nIf either operand is a NaN (signaling or quiet), the invalid flag is set.\n\nPositive zero and negative zero are considered equal.\n"

[format_4-3.instructions."flt.s"]
mask = 4261441663
match = 2684358739
description = "Writes 1 to _xd_ if _fs1_ is less than _fs2_, and 0 otherwise.\n\nIf either operand is NaN, the result is 0 (not equal).\nIf either operand is a NaN (signaling or quiet), the invalid flag is set.\n"

[format_4-7]
type = "type_4-7"

[format_4-7.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rs2_Register_float%"

[format_4-7.instructions."fmax.s"]
mask = 4261441663
match = 671092819
description = "No description available.\n"

[format_4-7.instructions."fmin.s"]
mask = 4261441663
match = 671088723
description = "No description available.\n"

[format_4-7.instructions."fsgnj.s"]
mask = 4261441663
match = 536870995
description = "Writes _fd_ with sign bit of _fs2_ and the exponent and mantissa of _fs1_.\n\nSign-injection instructions do not set floating-point exception flags, nor do they canonicalize NaNs.\n"

[format_4-7.instructions."fsgnjn.s"]
mask = 4261441663
match = 536875091
description = "Writes _fd_ with the opposite of the sign bit of _fs2_ and the exponent and mantissa of _fs1_.\n\nSign-injection instructions do not set floating-point exception flags, nor do they canonicalize NaNs.\n"

[format_4-7.instructions."fsgnjx.s"]
mask = 4261441663
match = 536879187
description = "Writes _fd_ with the xor of the sign bits of _fs2_ and _fs1_ and the exponent and mantissa of _fs1_.\n\nSign-injection instructions do not set floating-point exception flags, nor do they canonicalize NaNs.\n"

[format_5-2]
type = "type_5-2"

[format_5-2.repr]
default = "$name$ %rd_Register_float%, %imm%(%rs1_Register_int%)"

[format_5-2.instructions.flw]
mask = 28799
match = 8199
description = "The `flw` instruction loads a single-precision floating-point value from memory at address _xs1_ + _imm_ into floating-point register _fd_.\n\n`flw` does not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved.\n"

[format_6-15]
type = "type_6-15"

[format_6-15.repr]
default = "$name$ %rd_Register_float%, %rs1_Register_float%, %rs2_Register_float%, %rs3_Register_float%, %rm%"

[format_6-15.instructions."fmadd.s"]
mask = 100663423
match = 67
description = "No description available.\n"

[format_6-15.instructions."fmsub.s"]
mask = 100663423
match = 71
description = "No description available.\n"

[format_6-15.instructions."fnmadd.s"]
mask = 100663423
match = 79
description = "No description available.\n"

[format_6-15.instructions."fnmsub.s"]
mask = 100663423
match = 75
description = "No description available.\n"

[format_7-1]
type = "type_7-1"

[format_7-1.repr]
default = "$name$ %rs2_Register_float%, %imm%(%rs1_Register_int%)"

[format_7-1.instructions.fsw]
mask = 28799
match = 8231
description = "The `fsw` instruction stores a single-precision floating-point value in _fs2_ to memory at address _xs1_ + _imm_.\n\n`fsw` does not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved.\n"

[mappings]
names = [
    "Register_int",
    "Register_float",
    "Mapping_round",
]
number = 32
Register_int = [
    "zero",
    "ra",
    "sp",
    "gp",
    "tp",
    "t0",
    "t1",
    "t2",
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "s2",
    "s3",
    "s4",
    "s5",
    "s6",
    "s7",
    "s8",
    "s9",
    "s10",
    "s11",
    "t3",
    "t4",
    "t5",
    "t6",
]
Register_float = [
    "ft0",
    "ft1",
    "ft2",
    "ft3",
    "ft4",
    "ft5",
    "ft6",
    "ft7",
    "fs0",
    "fs1",
    "fa0",
    "fa1",
    "fa2",
    "fa3",
    "fa4",
    "fa5",
    "fa6",
    "fa7",
    "fs2",
    "fs3",
    "fs4",
    "fs5",
    "fs6",
    "fs7",
    "fs8",
    "fs9",
    "fs10",
    "fs11",
    "ft8",
    "ft9",
    "ft10",
    "ft11",
]
Mapping_round = [
    "rne",
    "rtz",
    "rdn",
    "rup",
    "rmm",
    "unknown",
    "unknown",
    "dyn",
]
