set = "RV32Zbkb"
width = 32

[formats]
names = [
    "format-1-0",
    "format-2-0",
    "format-3-0",
]
parts = [
    [
        "rd_Register_int",
        5,
        "Register_int",
    ],
    [
        "rd_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs1_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs1_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs2_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs2_Register_float",
        5,
        "Register_float",
    ],
    [
        "shamtw",
        5,
        "u8",
        "hex",
    ],
    [
        "none",
        32,
        "u32",
    ],
    [
        "imm",
        32,
        "VInt",
    ],
    [
        "himm",
        32,
        "VInt",
        "hex",
    ],
]

[types]
names = [
    "type-1-0",
    "type-2-0",
    "type-3-0",
]
type-1-0 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_int", top = 4, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-2-0 = [
    { name = "none", top = 31, bot = 20 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-3-0 = [
    { name = "none", top = 31, bot = 25 },
    { name = "shamtw", top = 4, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]

[format-1-0]
type = "type-1-0"

[format-1-0.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_int%, %rs2_Register_int%"

[format-1-0.instructions.andn]
mask = 4261441663
match = 1073770547
description = "Performs the bitwise logical AND operation between `xs1` and the\nbitwise inversion of `xs2`.\n"

[format-1-0.instructions.orn]
mask = 4261441663
match = 1073766451
description = "Performs the bitwise logical OR operation between xs1 and the bitwise inversion of xs2.\n"

[format-1-0.instructions.pack]
mask = 4261441663
match = 134234163
description = "No description available.\n"

[format-1-0.instructions.packh]
mask = 4261441663
match = 134246451
description = "No description available.\n"

[format-1-0.instructions.rol]
mask = 4261441663
match = 1610616883
description = "Performs a rotate left of xs1 by the amount in least-significant `log2(XLEN)` bits of xs2.\n"

[format-1-0.instructions.ror]
mask = 4261441663
match = 1610633267
description = "Performs a rotate right of xs1 by the amount in least-significant `log2(XLEN)` bits of xs2.\n"

[format-1-0.instructions.xnor]
mask = 4261441663
match = 1073758259
description = "Performs the bit-wise exclusive-NOR operation on xs1 and xs2.\n"

[format-2-0]
type = "type-2-0"

[format-2-0.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_int%"

[format-2-0.instructions.brev8]
mask = 4293947519
match = 1752190995
description = "Reverses the order of the bits in every byte of a register.\n"

[format-2-0.instructions.rev8]
mask = 4293947519
match = 1770016787
description = "Reverses the order of the bytes in rs1.\n\n[NOTE]\nThe rev8 mnemonic corresponds to different instruction encodings in RV32 and RV64.\n\n[NOTE]\nThe byte-reverse operation is only available for the full register width. To emulate word-sized\nand halfword-sized byte-reversal, perform a `rev8 xd,xs1` followed by a `srai xd,xd,K`, where K\nis XLEN-32 and XLEN-16, respectively.\n"

[format-2-0.instructions.unzip]
mask = 4293947519
match = 149966867
description = "Gathers bits from the high and low halves of the source word into odd/even bit\npositions in the destination word. It is the inverse of the zip instruction. This instruction is\navailable only on RV32.\n"

[format-2-0.instructions.zip]
mask = 4293947519
match = 149950483
description = "Scatters all of the odd and even bits of a source word into the high and low halves\nof a destination word. It is the inverse of the unzip instruction. This instruction is available only on\nRV32.\n"

[format-3-0]
type = "type-3-0"

[format-3-0.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_int%, %shamtw%"

[format-3-0.instructions.rori]
mask = 4261441663
match = 1610633235
description = "Performs a rotate right of xs1 by the amount in the least-significant log2(XLEN) bits of shamt.\nFor RV32, the encodings corresponding to shamt[5]=1 are reserved.\n"

[mappings]
names = [
    "Register_int",
    "Register_float",
]
number = 32
Register_int = [
    "zero",
    "ra",
    "sp",
    "gp",
    "tp",
    "t0",
    "t1",
    "t2",
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "s2",
    "s3",
    "s4",
    "s5",
    "s6",
    "s7",
    "s8",
    "s9",
    "s10",
    "s11",
    "t3",
    "t4",
    "t5",
    "t6",
]
Register_float = [
    "ft0",
    "ft1",
    "ft2",
    "ft3",
    "ft4",
    "ft5",
    "ft6",
    "ft7",
    "fs0",
    "fs1",
    "fa0",
    "fa1",
    "fa2",
    "fa3",
    "fa4",
    "fa5",
    "fa6",
    "fa7",
    "fs2",
    "fs3",
    "fs4",
    "fs5",
    "fs6",
    "fs7",
    "fs8",
    "fs9",
    "fs10",
    "fs11",
    "ft8",
    "ft9",
    "ft10",
    "ft11",
]
