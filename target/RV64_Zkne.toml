set = "RV64Zkne"
width = 32

[formats]
names = [
    "format-1-0",
    "format-2-0",
]
parts = [
    [
        "rd_Register_int",
        5,
        "Register_int",
    ],
    [
        "rd_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs1_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs1_Register_float",
        5,
        "Register_float",
    ],
    [
        "rs2_Register_int",
        5,
        "Register_int",
    ],
    [
        "rs2_Register_float",
        5,
        "Register_float",
    ],
    [
        "rnum",
        4,
        "u8",
        "hex",
    ],
    [
        "none",
        32,
        "u32",
    ],
    [
        "imm",
        32,
        "VInt",
    ],
    [
        "himm",
        32,
        "VInt",
        "hex",
    ],
]

[types]
names = [
    "type-1-0",
    "type-2-0",
]
type-1-0 = [
    { name = "none", top = 31, bot = 25 },
    { name = "rs2_Register_int", top = 4, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]
type-2-0 = [
    { name = "none", top = 31, bot = 24 },
    { name = "rnum", top = 3, bot = 0 },
    { name = "rs1_Register_int", top = 4, bot = 0 },
    { name = "none", top = 14, bot = 12 },
    { name = "rd_Register_int", top = 4, bot = 0 },
    { name = "none", top = 6, bot = 0 },
]

[format-1-0]
type = "type-1-0"

[format-1-0.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_int%, %rs2_Register_int%"

[format-1-0.instructions.aes64es]
mask = 4261441663
match = 838860851

[[format-1-0.instructions.aes64es.description]]
id = "inst-aes64es-behavior"
normative = true
text = "Uses the two 64-bit source registers to represent the entire AES state, and produces _half_ of the next\nround output, applying the ShiftRows and SubBytes steps.\n"

[format-1-0.instructions.aes64esm]
mask = 4261441663
match = 905969715

[[format-1-0.instructions.aes64esm.description]]
id = "inst-aes64esm-behavior"
normative = true
text = "Uses the two 64-bit source registers to represent the entire AES state, and produces _half_ of the next\nround output, applying the Inverse ShiftRows, SubBytes and MixColumns steps.\n"

[format-1-0.instructions.aes64ks2]
mask = 4261441663
match = 2113929267

[[format-1-0.instructions.aes64ks2.description]]
id = "instr-aes64ks2-behavior"
normative = true
text = "This instruction implements the additional XOR'ing of key words as part of the AES block cipher\nKey Schedule.\n"

[format-2-0]
type = "type-2-0"

[format-2-0.repr]
default = "$name$ %rd_Register_int%, %rs1_Register_int%, %rnum%"

[format-2-0.instructions.aes64ks1i]
mask = 4278218879
match = 822087699

[[format-2-0.instructions.aes64ks1i.description]]
id = "inst-aes64ks1i-behavior"
normative = true
text = "This instruction implements the rotation, SubBytes and Round Constant addition steps of the AES\nblock cipher Key Schedule.\n"

[[format-2-0.instructions.aes64ks1i.description]]
id = "inst-aes64ks1i-range"
normative = true
text = "`rnum` must be in the range `0x0..0xA`. The values `0xB..0xF` are reserved.\n"

[mappings]
names = [
    "Register_int",
    "Register_float",
]
number = 32
Register_int = [
    "zero",
    "ra",
    "sp",
    "gp",
    "tp",
    "t0",
    "t1",
    "t2",
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "s2",
    "s3",
    "s4",
    "s5",
    "s6",
    "s7",
    "s8",
    "s9",
    "s10",
    "s11",
    "t3",
    "t4",
    "t5",
    "t6",
]
Register_float = [
    "ft0",
    "ft1",
    "ft2",
    "ft3",
    "ft4",
    "ft5",
    "ft6",
    "ft7",
    "fs0",
    "fs1",
    "fa0",
    "fa1",
    "fa2",
    "fa3",
    "fa4",
    "fa5",
    "fa6",
    "fa7",
    "fs2",
    "fs3",
    "fs4",
    "fs5",
    "fs6",
    "fs7",
    "fs8",
    "fs9",
    "fs10",
    "fs11",
    "ft8",
    "ft9",
    "ft10",
    "ft11",
]
